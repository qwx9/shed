diff 00542efd15c5ee37fa927fbe9ba85a2bb377d406 uncommitted
--- a/sys/src/cmd/faces/main.c
+++ b/sys/src/cmd/faces/main.c
@@ -54,10 +54,16 @@
 	0x18, 0x00, 0x00, 0x10, 0x00
 };
 
-Image	*blue;		/* full arrow */
-Image	*bgrnd;		/* pale blue background color */
-Image	*left;		/* left-pointing arrow mask */
-Image	*right;		/* right-pointing arrow mask */
+enum{
+	Cbgrnd,
+	Carrow,
+	Csmallfg,
+	Cfacebg,
+	Ncols,
+};
+Image *cols[Ncols];
+Image	*left;		/* left-pointing cols[Carrow] mask */
+Image	*right;		/* right-pointing cols[Carrow] mask */
 Font	*tinyfont;
 Font	*mediumfont;
 Font	*datefont;
@@ -74,9 +80,9 @@
 
 Point	datep = { 8, 6 };
 Point	facep = { 8, 6+0+4 };	/* 0 updated to datefont->height in init() */
-Point	enddate;			/* where date ends on display; used to place arrows */
-Rectangle	leftr;			/* location of left arrow on display */
-Rectangle	rightr;		/* location of right arrow on display */
+Point	enddate;			/* where date ends on display; used to place cols[Carrow]s */
+Rectangle	leftr;			/* location of left cols[Carrow] on display */
+Rectangle	rightr;		/* location of right cols[Carrow] on display */
 void updatetimes(void);
 
 void
@@ -89,7 +95,8 @@
 
 void
 init(void)
-{
+{	int i;
+
 	mousefd = open("/dev/mouse", OREAD);
 	if(mousefd < 0){
 		fprint(2, "faces: can't open mouse: %r\n");
@@ -97,16 +104,21 @@
 	}
 	initplumb();
 
-	/* make background color */
-	bgrnd = allocimagemix(display, DPalebluegreen, DWhite);
-	blue = allocimage(display, Rect(0,0,1,1), screen->chan, 1, 0x008888FF);	/* blue-green */
+	Theme th[nelem(cols)] = {
+		[Cbgrnd] { "back",		DBlack },
+		[Carrow] { "palehold",		0x008888FF },
+		[Csmallfg] { "menubord",	DBlack },
+		[Cfacebg] { "text",		DBlack },
+	};
+	readtheme(th, nelem(th), nil);
+	for(i=0; i<nelem(cols); i++)
+ 		cols[i] = allocimage(display, Rect(0,0,1,1), screen->chan, 1, th[i].c);
 	left = allocimage(display, leftright, GREY1, 0, DWhite);
 	right = allocimage(display, leftright, GREY1, 0, DWhite);
-	if(bgrnd==nil || blue==nil || left==nil || right==nil){
+	if(cols[Cbgrnd]==nil || cols[Carrow]==nil || cols[Csmallfg] == nil || cols[Cfacebg] == nil || left==nil || right==nil){
 		fprint(2, "faces: can't create images: %r\n");
 		exits("image");
 	}
-
 	loadimage(left, leftright, leftdata, sizeof leftdata);
 	loadimage(right, leftright, rightdata, sizeof rightdata);
 
@@ -114,7 +126,7 @@
 	tinyfont = openfont(display, "/lib/font/bit/misc/ascii.5x7.font");
 	if(tinyfont == nil)
 		tinyfont = font;
- 	mediumfont = openfont(display, "/lib/font/bit/misc/unicode.6x13.font");
+ 	mediumfont = openfont(display, "/lib/font/bit/vga/unicode.font");
  	if(mediumfont == nil)
  		mediumfont = font;
 	datefont = font;
@@ -138,8 +150,8 @@
 	}
 	r.max.x = enddate.x;
 	r.max.y = enddate.y+datefont->height;
-	draw(screen, r, bgrnd, nil, ZP);
-	string(screen, r.min, display->black, ZP, datefont, date);
+	draw(screen, r, cols[Cbgrnd], nil, ZP);
+	string(screen, r.min, cols[Csmallfg], ZP, datefont, date);
 }
 
 void
@@ -257,19 +269,20 @@
 	if(i<first || i>=last)
 		return;
 	r = facerect(i-first);
-	draw(screen, r, bgrnd, nil, ZP);
+	draw(screen, r, cols[Cbgrnd], nil, ZP);
+	draw(screen, Rpt(r.min, addpt(r.min, Pt(Facesize, Facesize))), cols[Cfacebg], nil, ZP);
 	draw(screen, r, f->bit, f->mask, ZP);
 	r.min.y += Facesize;
-	center(mediumfont, r.min, f->str[Suser], display->black);
+	center(mediumfont, r.min, f->str[Suser], cols[Csmallfg]);
 	r.min.y += mediumfont->height;
 	tstr = facetime(f, &f->recent);
-	center(mediumfont, r.min, tstr, display->black);
+	center(mediumfont, r.min, tstr, cols[Cfacebg]);
 	if(f->unknown){
 		r.min.y -= mediumfont->height + tinyfont->height + 2;
 		for(p.x=-1; p.x<=1; p.x++)
 			for(p.y=-1; p.y<=1; p.y++)
-				center(tinyfont, addpt(r.min, p), f->str[Sdomain], display->white);
-		center(tinyfont, r.min, f->str[Sdomain], display->black);
+				center(tinyfont, addpt(r.min, p), f->str[Sdomain], cols[Cbgrnd]);
+		center(tinyfont, r.min, f->str[Sdomain], cols[Cfacebg]);
 	}
 }
 
@@ -308,8 +321,8 @@
 	leftr = rectaddpt(leftright, p);
 	p.x += Dx(leftright) + Facesep;
 	rightr = rectaddpt(leftright, p);
-	draw(screen, leftr, first>0? blue : bgrnd, left, leftright.min);
-	draw(screen, rightr, last<nfaces? blue : bgrnd, right, leftright.min);
+	draw(screen, leftr, first>0? cols[Carrow] : cols[Cbgrnd], left, leftright.min);
+	draw(screen, rightr, last<nfaces? cols[Carrow] : cols[Cbgrnd], right, leftright.min);
 }
 
 void
@@ -423,7 +436,7 @@
 		else{
 			/* clear final spot */
 			r = facerect(last-first-1);
-			draw(screen, r, bgrnd, nil, r.min);
+			draw(screen, r, cols[Cbgrnd], nil, r.min);
 		}
 	}
 	freeface(faces[j]);
@@ -488,7 +501,7 @@
 	for(ndown=1; rectinrect(facerect(ndown*nacross), screen->r); ndown++)
 		;
 	setlast();
-	draw(screen, screen->r, bgrnd, nil, ZP);
+	draw(screen, screen->r, cols[Cbgrnd], nil, ZP);
 	enddate = ZP;
 	drawtime();
 	for(i=0; i<nfaces; i++)
