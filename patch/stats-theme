diff d55a64c90512aae66b5cabac57edc3e957bd3f0c uncommitted
--- a/sys/src/cmd/stats.c
+++ b/sys/src/cmd/stats.c
@@ -207,7 +207,23 @@
 	tempval,
 };
 
+enum{
+	Cback,
+	Cbord,
+	Ctext,
+	Cmix1,
+	Nscolor = Cmix1,
+	Ccol1,
+	Ccol2,
+	Ccol3,
+	Ccol4,
+	Ccol5,
+	Ccol6,
+	Ntcolor,
+};
+
 Image	*cols[Ncolor][3];
+Image	*tcols[Nscolor];
 Graph	*graph;
 Machine	*mach;
 char	*mysysname;
@@ -273,30 +289,23 @@
 }
 
 void
-mkcol(int i, int c0, int c1, int c2)
+mkcol(int i, int mix, int c)
 {
-	cols[i][0] = allocimagemix(display, c0, DWhite);
-	cols[i][1] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, c1);
-	cols[i][2] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, c2);
+	/* dunno lol */
+	cols[i][0] = allocimagemix(display, c, mix);
+	cols[i][1] = allocimagemix(display, c, mix ^ ~0xff);
+	cols[i][2] = allocimage(display, Rect(0,0,1,1), screen->chan, 1, c);
 }
 
 void
-colinit(void)
+colinit(Theme th[Ntcolor])
 {
-	/* Peach */
-	mkcol(0, 0xFFAAAAFF, 0xFFAAAAFF, 0xBB5D5DFF);
-	/* Aqua */
-	mkcol(1, DPalebluegreen, DPalegreygreen, DPurpleblue);
-	/* Yellow */
-	mkcol(2, DPaleyellow, DDarkyellow, DYellowgreen);
-	/* Green */
-	mkcol(3, DPalegreen, DMedgreen, DDarkgreen);
-	/* Blue */
-	mkcol(4, 0x00AAFFFF, 0x00AAFFFF, 0x0088CCFF);
-	/* Grey */
-	cols[5][0] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0xEEEEEEFF);
-	cols[5][1] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0xCCCCCCFF);
-	cols[5][2] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0x888888FF);
+	mkcol(0, th[Cmix1].c, th[Ccol1].c);
+	mkcol(1, th[Cmix1].c, th[Ccol2].c);
+	mkcol(2, th[Cmix1].c, th[Ccol3].c);
+	mkcol(3, th[Cmix1].c, th[Ccol4].c);
+	mkcol(4, th[Cmix1].c, th[Ccol5].c);
+	mkcol(5, th[Cmix1].c, th[Ccol6].c);
 }
 
 int
@@ -339,7 +348,7 @@
 		w = runestringwidth(font, r);
 		if(w > maxw)
 			maxw = w;
-		runestring(screen, p, display->black, ZP, font, r);
+		runestring(screen, p, tcols[Ctext], ZP, font, r);
 		p.y += font->height-Ysqueeze;
 	}
 }
@@ -439,7 +448,7 @@
 		g->overflow = 1;
 		draw(g->overtmp, g->overtmp->r, screen, nil, g->overtmp->r.min);
 		sprint(buf, "%llud", v);
-		string(screen, g->overtmp->r.min, display->black, ZP, font, buf);
+		string(screen, g->overtmp->r.min, tcols[Ctext], ZP, font, buf);
 	}
 }
 
@@ -1106,7 +1115,7 @@
 	uvlong v, vmax;
 	char buf[128], labs[Nlab][Lablen];
 
-	draw(screen, screen->r, display->white, nil, ZP);
+	draw(screen, screen->r, tcols[Cback], nil, ZP);
 
 	/* label left edge */
 	x = screen->r.min.x;
@@ -1116,7 +1125,7 @@
 	startx = x+dx+1;
 	starty = y;
 	for(i=0; i<ngraph; i++,y+=dy){
-		draw(screen, Rect(x, y-1, screen->r.max.x, y), display->black, nil, ZP);
+		draw(screen, Rect(x, y-1, screen->r.max.x, y), tcols[Cbord], nil, ZP);
 		draw(screen, Rect(x, y, x+dx, screen->r.max.y), cols[graph[i].colindex][0], nil, paritypt(x));
 		label(Pt(x, y), dy, graph[i].label);
 		draw(screen, Rect(x+dx, y, x+dx+1, screen->r.max.y), cols[graph[i].colindex][2], nil, ZP);
@@ -1125,7 +1134,7 @@
 	/* label top edge */
 	dx = (screen->r.max.x - startx)/nmach;
 	for(x=startx, i=0; i<nmach; i++,x+=dx){
-		draw(screen, Rect(x-1, starty-1, x, screen->r.max.y), display->black, nil, ZP);
+		draw(screen, Rect(x-1, starty-1, x, screen->r.max.y), tcols[Cbord], nil, ZP);
 		j = dx/stringwidth(font, "0");
 		n = mach[i].nproc;
 		if(n>1 && j>=1+3+mach[i].lgproc){	/* first char of name + (n) */
@@ -1135,7 +1144,7 @@
 			snprint(buf, sizeof buf, "%.*s(%d)", j, mach[i].shortname, n);
 		}else
 			snprint(buf, sizeof buf, "%.*s", j, mach[i].shortname);
-		string(screen, Pt(x+Labspace, screen->r.min.y + Labspace), display->black, ZP, font, buf);
+		string(screen, Pt(x+Labspace, screen->r.min.y + Labspace), tcols[Ctext], ZP, font, buf);
 	}
 
 	maxx = screen->r.max.x;
@@ -1146,7 +1155,7 @@
 		if(wid < dx-10){
 			/* else there's not enough room */
 			maxx -= 1+Lx+wid;
-			draw(screen, Rect(maxx, starty, maxx+1, screen->r.max.y), display->black, nil, ZP);
+			draw(screen, Rect(maxx, starty, maxx+1, screen->r.max.y), tcols[Cbord], nil, ZP);
 			y = starty;
 			for(j=0; j<ngraph; j++, y+=dy){
 				/* choose value for rightmost graph */
@@ -1158,9 +1167,9 @@
 				draw(screen, r, cols[g->colindex][0], nil, paritypt(r.min.x));
 				for(k=0; k<nlab; k++){
 					ly = y + (dy*(nlab-k)/(nlab+1));
-					draw(screen, Rect(maxx+1, ly, maxx+1+Lx, ly+1), display->black, nil, ZP);
+					draw(screen, Rect(maxx+1, ly, maxx+1+Lx, ly+1), tcols[Cbord], nil, ZP);
 					ly -= font->height/2;
-					string(screen, Pt(maxx+1+Lx, ly), display->black, ZP, font, labs[k]);
+					string(screen, Pt(maxx+1+Lx, ly), tcols[Ctext], ZP, font, labs[k]);
 				}
 			}
 		}
@@ -1411,7 +1420,23 @@
 		exits("initdraw");
 	}
 	display->locking = 1;	/* tell library we're using the display lock */
-	colinit();
+
+	Theme th[Ntcolor] = {
+		[Cback] { "back",	DWhite },
+		[Cbord] { "border",	DBlack },
+		[Ctext] { "text",	DBlack },
+		[Cmix1] { "rioback",	DWhite },
+		[Ccol1] { "htext",	0xFFAAAAFF },
+		[Ccol2] { "high",	DPurpleblue },
+		[Ccol3] { "hold",	DYellowgreen },
+		[Ccol4] { "size",	DDarkgreen },
+		[Ccol5] { "title",	0x0088CCFF },
+		[Ccol6] { "paletext",	0x888888FF },
+	};
+	readtheme(th, nelem(th), nil);
+	for(i=0; i<nelem(tcols); i++)
+ 		tcols[i] = allocimage(display, Rect(0,0,1,1), screen->chan, 1, th[i].c);
+	colinit(th);
 	einit(Emouse|Ekeyboard);
 	startproc(inputproc, Inputproc);
 	pids[Mainproc] = getpid();
